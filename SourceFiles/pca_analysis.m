% pca.m
% Last modified: 8/14/18 by T. Chuanromanee
% Performs pca analysis on datasets

%% Notes
% Most robust would be to adapt to whatever the data is in the CSV
% Reference for variance:
% https://stats.stackexchange.com/questions/22569/pca-and-proportion-of-variance-explained 
% Reference for pca values generated by pca function:
% https://www.mathworks.com/help/stats/quality-of-life-in-u-s-cities.html

function pca_analysis(~)
    %% Define variables
    numGraphs = 0; % number of graphs needed to generate
    pointSize = 10; % Size of each circle in PC score scatterplot
    covMatrix = []; % Matrix to hold covariance values of the data
    pcPercentVar = []; % Holds % difference explained by each PC in an array (sums up to 1)

    %% Get file and PC information
    [inputFile, inputDirectory] = uigetfile('*.csv','Principal Component Analysis: Select an input CSV file','MultiSelect','on');
    if isequal(inputFile, 0)
    	msgbox('No input file selected. Please try again!','Error');
        return;
    end
    
    if isequal(class(inputFile), 'cell') % Index cell array if multiple files selected
        for i=1:length(inputFile)
            [headers, dataName, fileNumericalData, numGraphs] = getFileData(inputFile{i}, inputDirectory);
            % Concatenate numerical data
            if i == 1
               numericalData = fileNumericalData;
            else
                numericalData = vertcat(numericalData, fileNumericalData);
            end
        end
    else % Only one file is selected
        [headers, dataName, fileNumericalData, numGraphs] = getFileData(inputFile, inputDirectory);
        numericalData = fileNumericalData;
    end
    %% Get covariance matrix (used to find out percent difference explained by each PC)
    covMatrix = cov(numericalData);
    disp('Covariance Matrix');
    disp(covMatrix);

    % Loadings are the covariances between variables and components
    [pcaCoefficients, pcScores, pcVariances] = pca(numericalData);
    % disp('PCA Coefficients (Loadings): the first n principal coefficients');
    % disp('They are eigenvectors normalized to respective eigenvalues');
    % disp(pcaCoefficients); % pcaCoefficients are orthonormal
    % disp('Variances (Eigenvalues)');
    % disp(pcVariances);
    pcPercentVar = computePercentVariance(covMatrix, pcVariances);
    % Plot just PC1 and PC2
    firstPCNumber = 1;
    secondPCNumber = 2;
    figure;
    hold on;
    scoreTitle = sprintf('PC Scores (PC%d vs PC%d)', firstPCNumber, secondPCNumber);
    title(scoreTitle);
    firstPCTitle = sprintf('PC%d Score - %s%%', firstPCNumber, num2str(pcPercentVar(firstPCNumber)*100,4));
    secondPCTitle = sprintf('PC%d Score - %s%%', secondPCNumber, num2str(pcPercentVar(secondPCNumber)*100,4));
    xlabel(firstPCTitle) % x-axis label; Change later w variable header names
    ylabel(secondPCTitle) % y-axis label; Change later w variable header names
    rows = pcScores(:,firstPCNumber)'; % Row data (scores) for PC1 (nth column)
    cols = pcScores(:,secondPCNumber)'; % Column data (scores) for PC2 (nth column)
    color1 = [0.4 0.6 0.9];
    %color2 = [0.8 0.5 0.7];
    %color3 = [0.2745    0.3255    0.3843];
    % Plot the 3 trees
     %scatter(rows(1:268),cols(1:268), pointSize, color1, 'filled');
     %scatter(rows(269:633),cols(269:633), pointSize, color2, 'filled');
     %scatter(rows(634:992),cols(634:992), pointSize, color3, 'filled');
     %legend('Tree 1','Tree 2','Tree 3');
    scatter(rows,cols, pointSize, color1, 'filled');
    hold off;
    %% Plot the data in a biplot
    % Visualize both the orthonormal principal component coefficients for 
    % each variable and the principal component scores for each observation in a single plot
    figure;
    biplotTitle = sprintf('PC Coefficients');
    title(biplotTitle);
    coeffXTitle = sprintf('Component 1 (%s%%)', num2str(pcPercentVar(firstPCNumber)*100,4));
    coeffYTitle = sprintf('Component 2 (%s%%)', num2str(pcPercentVar(secondPCNumber)*100,4));
    xlabel(coeffXTitle) % x-axis label; Change later w variable header names
    ylabel(coeffYTitle) % y-axis label; Change later w variable header names
    hold on;
    biplot(pcaCoefficients(:,1:2),'scores',pcScores(:,1:2)); % biplot coeffs must have 2-3 cols
    
    %% Export to file
    
    exportFileName = datestr(now, 'yyyy_mm_dd_HHMMSS');
    % Set up files
    pcaScoresFile = sprintf('pca_scores_%s.csv', exportFileName);
    pcVariancesFile = sprintf('pc_variances_%s.csv', exportFileName);
    pcaCoefficentsFile = sprintf('pca_coefficients_%s.csv', exportFileName);
    
    % Write headers to PC scores file
    pcaScoresFileID = fopen(pcaScoresFile,'wt');
    for i = 1:size(pcScores,2) % number of pcs is number of columns
        fprintf(pcaScoresFileID, 'PC%d,', i);
    end
    
    % Write data to PCA scores file
    fprintf(pcaScoresFileID, '\n');
    for i = 1:size(pcScores,1) % number of rows in PCA scores matrix
        for j = 1:size(pcScores,2) % number of columns in PCA scores matrix
            fprintf(pcaScoresFileID, '%f,', pcScores(i,j));
        end
        fprintf(pcaScoresFileID, '\n');
    end
    fclose(pcaScoresFileID);
    
    % Write headers to PC variances file
    pcaVariancesFileID = fopen(pcVariancesFile,'wt');
    fprintf(pcaVariancesFileID, 'Variance for each PC (each row corresponds to a PC)');
    
    % Write data to PC variances file
    fprintf(pcaVariancesFileID, '\n');
    for i = 1:size(pcVariances,1) % number of rows in PCA scores matrix
        fprintf(pcaVariancesFileID, '%f,', pcScores(i,1)); % row i column 1 in all cases
        fprintf(pcaVariancesFileID, '\n');
    end
    fclose(pcaVariancesFileID);
    
    % Write headers to PC coefficients file
    pcCoefficientsFileID = fopen(pcaCoefficentsFile,'wt');
    for i = 1:size(pcaCoefficients,2) % number of pcs is number of columns
        fprintf(pcCoefficientsFileID, 'PC%d,', i);
    end
    
     % Write data to PC coefficients file
    fprintf(pcCoefficientsFileID, '\n');
    for i = 1:size(pcaCoefficients,1) % number of rows in PCA scores matrix
        for j = 1:size(pcaCoefficients,2) % number of columns in PCA scores matrix
            fprintf(pcCoefficientsFileID, '%f,', pcaCoefficients(i,j));
        end
        fprintf(pcCoefficientsFileID, '\n');
    end
    fclose(pcCoefficientsFileID);
    
end


%% Get file and PC information
function [headers, dataName, numericalData, numGraphs] = getFileData(inputFile, inputDirectory)
    %directoryArray = strsplit(inputFile,'/'); % Split inputFile directory separated by /
    dataName = inputFile; % Get name of the file containing the data
    inputPath = fullfile(inputDirectory, inputFile);
    fileMatrix = importdata(inputPath); % Get header information and data from file
    numericalData = fileMatrix.data; % Contains all numerical data in order presented in file
    headers = fileMatrix.colheaders; % Column headers, in an array
    headerCount = size(headers); % Number of variables
    numColumns = headerCount(2);
    % Need to preallocate pcPercentVar based on expected number of PCs

    %% Find combination of PCs need to run
    numGraphs = nchoosek(numColumns, 2);
end
    
    
%% For each PC, determine its difference that it explains
function pcPercentVar = computePercentVariance(covMatrix, pcVariances)
    overallVariability = trace(covMatrix); % The sum of the diagonal elements of covmatrix
    for i=1:length(pcVariances)
        pcPercentVar(i) = pcVariances(i)/overallVariability;
    end
    disp('Percent of variation explained by PCs');
    disp(pcPercentVar);
end